1. How links are stored. 

The biggest value a signed long can take is 9223372036854775807. That is 19 digits.
Take the first 7 digits as the table id section. The last 12 digits as entry id section.
ie, take this number : 9223372036854775807, 9223372 identifies the table,  036854775807 identifies the unique id inside that table.

  1) When a link is added, it takes several process. 
      a) The link is mapped to a unique string, identifies which link table should be used to store link.
      b) Get the link store based on the string. 
      c) Use that store, check if that link is already been processed.
      d) If it's already processed, do nothing. 
         If it's not already processed, add it. 
      
      if on step b), there is no link store found, create a new link store for that unique string. with the starting id set to 
      10000000+ [current number of link tables] + 000000000000, set the id to auto_increment  
      
  2) When trying to locate a link from the store, with an link id
      a) get the first 7 digits of the link. finding the matching table based on the link nomaclature.
  
  3) How to test if a link is beening processed or not. 
     Follow same step as 1), only do a selection.
     
  4) How to create a link table.
     a) create table, alter auto_increment index, create index 
     
  
  5) how to get next unprocessed link from a specific link store. 
     order by id, asc, where processed is false
  
  6) how to expire a link. When a link is returned for processing, a timestamp is put on the link, the state field in database will be marked as processing. 
     Then periodically, the link is scanned to check if the timestamp is too long. if it's too long, the link is purged and removed from processing queue. 
     If the system halts, all of the processing link that is not finished will be left as processing in the database. So before system start completely, have 
     to issue an update, to update all of the processing link as not processed. Then it will be loaded again.
     
          
      


#link_nnnnnnn table structure
    id bigint
    url varchar(1000)
    createTime timestamp
    finishTime timestamp
    tryCount tinyint
    state  tinyint        // 0 for not tried, 1 for finished ok, 2 for error,  9 for processing


#linktablemap table structure
    id integer,  tableid integer, uid varchar(200)

tableid is usally same as id, but there are wired cases as well
================================================================================================================================================================================================

2. How images are stored.

Image is stored using ImageStore instance. 
When storing an image, must provide an image type, and the binary content of the image. 
Inside the image store, an uuid is generated for the image, the uuid plus the image suffix is the image name.

Then the image is stored like this:
An uuid is generated with java.util.UUID class. Then '-' in the uuid is replaced with 'o'.  Then the last 5 char of the uuid is taken out. 
And each character is taken out and mapped to a directory with the same name. Then the file is stored there.

for example, if you feed with the ImageSotre an binary image and a file suffix 'jpg'. And the store generate an uuid e1559f27oc22fo452foa0fco03c461b05383
Then the last 5 digits of the uuid 05383 is taken out, and the image is stored in the folder [ImageStore_Root_Directory]/0/5/3/9/3/e1559f27oc22fo452foa0fco03c461b05383.jpg
There is very little chance that there will be a duplicate of the same image, if there are, it is just ignored.


3 How to create an object with image on it.

To create an image, you need the following parameters:
1. imageData[n], the base64 encoded binary data of the image.
2. imageSuffix[n], the suffix of the image.
3. imageCount, which should be used number the n above, indicates how many images are posted with this request.
4. imageField[n], for image[n], which field do you expect to get the image back. The images will be assinged a unique id, and stored in that field, 
   if two or more images are stored in the same field, then these images will be separated with ';' and stored sequecially.

For example, if there is 3 images associated with this object, and the type is .jpg,  and you want to store the generated
image unique ids to imageField, the request to create this image would be:

    imageData0=binary_conetent_encoded_with_base64
    imageSuffix0=jpg
    imageField0=houseImage
    imageData1=binary_conetent_encoded_with_base64
    imageSuffix1=png
    imageField1=houseImage
    imageData2=binary_conetent_encoded_with_base64
    imageSuffix2=png
    imageField1=yardImage    
    imageCount=3
    

When requesting the object, you will get something like this:
    field houseImage:  uuidnnnnnnnnnnnn.jpg;uuidnnnnnnnnnnnn.png,
    filed yardImage:   uuidnnnnnnnnnnnn.jpg
    
based on these 3 uuids you will be able to retrieve the same image.


    
4 House Statistics

Day Interval

city, date,  numberOfSale, numberOfRent, totalSaleSize, totalSalePrice, averageSalePrice



5 java api for querying

SearchManager
    singleton
    caching 
    
SearchFilter
    supported field, orderby, order, count,
      
    add(filed, value, value) , value is an object, should be double, int, long, date  
    addInt()
    addDouble
    addDate
    addTimestamp
    addKeyword
    
SearchResult
    count
    object


6 How key and pass is generated

The key is generated like this
 1) Take each seq from seq, then divide time with it, get a remaining.
 2) Mods the remaining with length of the key, get another sequence
 3) take the char at the index of the sequence generated at step2, and form a string
 4) generate a md5 from time  



7 film database design

theater name
theater city
film name
date
showtime
description


8 how object is created 
 Object is create by making a http post to /object url, there are two ways to do this
 
 1) object can be created with tranditional http post parameters, with "objectid" specified 
    as the object id ( this should be the same as the hibernate entity name), other fields 
    should be the same as they appears in the database. 
 
 2) or post a json object with a "data" field set as a stringified json object, and a "format"
    field set as "jsondata" .  The json object should have it's objectid set as the objectid, 
    other fields should be the same as it appears in database. 
    
 By default object can only be created when the request came with a referer, and that
 referer has to be in link list. If you want to skip the check, set skipUrlCheck=true in the parameter.


9 how watch list is monitered

each watch list begin with a # followed by a quartz scheduler definition defines a time.
then an interval in seconds. 

When the time arrives, a thread will be started to injecting links on the list to the link manager
the directory to look for is watchlist/watch.list


     
 






